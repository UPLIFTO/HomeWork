Client_Server

1) Прочиать про клиент-серверную архитектуру

Клиент-сервисная архитектура - когда данные от клиента(web,desktop приложений) запрашиваются с сервера в виде HTTP-запросов.
Клиент - это то с чем работает пользователь (web сайты,приложения и тд.)
Сервер - это место где хранятся данные и происходит обработка запросов от клиента.
Виды клиент-сервисной архитектуры:
а) Двухуровневая - когда в цепочке есть клиент и сервер
б) Трехуровневая - когда в цепочке есть клиент - сервер -база данных 

2) Что такое HTTP и HTTPS

HTTP(Hypertext Transfer Protocol) - основной протокол связи,который должны поддерживать клиент и сервер.
Протокол передаёт информацию между браузером и сервером в чистом виде,позволяя видеть эту информацию в сети.
HTTP Secure (HTTPS) - это расширение HTTP которое позволяет шифровать данные при передаче. 
Для шифрования данных HTTPS используется криптографический протокол SSL(Secure Sockets Layer) и TLS(Transport Layer Security).
SSL есть несколько версий SSL 1.0, SSL 2.0 ,SSL 3.0 - на данный момент не используется в шифровании данных.
TLS пришел на замену устаревшей SSL. 
Версии протокола TLS  1.0  1.1  1.2  1.3 
В настоящее время для шифрования данных используется протокол TLS с версиями 1.2 и 1.3

3) HTTP методы

HTTP определяет множество методов запроса,которые указывают, какое желамое действие выполнить для данного ресурса.
GET — получает информацию с сервера, не требует тела запроса
POST — создает в базе новый объект, требует тело запроса с полями этого объекта;
PUT — полностью обновляет конкретный объект в базе данных;
PATCH — аналогично PUT, обновляет определенный объект в базе данных, но обновляет только те поля, которые указаны в теле запроса;
DELETE — удаляет объект из базы данных.

4) HTTP статус коды сервера

Код ответа HTTP показывает был ли успешно выполнен определенный HTTP запрос.
Коды сгруппированы в 5 классов:
1хх - ИНФОРМАЦИОННЫЕ
2хх - УСПЕШНЫЕ
200 - запрос от клиента успешно обработан сервером. Все данные обработаны и получены.
3хх - ПЕРЕНАПРАВЛЕННЫЕ
301 - "Перемещен на постоянной основе".Этот код ответа значит что URI запрашиваемого ресурса был изменен.Возможно новый URI будет предоставлен в ответе.
304 - "Не модифицировано".Данные с запрашиваемого ресурса не были изменены,клиент может продолжать использовать кэшированую версию ответа.
4хх - КЛИЕНТСКИЕ ОШИБКИ
400 - "Плохой запрос".Запрос не смог быть обработан сервером,он был составлен неверно(неверный синтаксис).
401 - "Неавторизовано". Для получения запрашиваемого ответа нужна аутентификация (неверно введен логин или пароль).
403 - "Запрещено".У клиента нет прав доступа к содержимому.Когда у разных клиентов свои права к доступу (админ,юзер,гость)
404 - "Не найден". Сервер не может найти запрашиваемый ресурс. Запрашиваемый ресурс удален или временно не работает ссылка. 
5хх - СЕРВЕРНЫЕ ОШИБКИ

5) Что такое ядро браузера

Ядро - это программа или модуль,который отображает контент на основе языка разметки. 
Преобразует содержимое веб-страницы(файлы HTML,CSS,цифровые изображения) в интерактивное изображение на экране.
 
6) Какие браузеры какиие ядра используют

Ядро TRIDENT(ядро IE) использует Internet Explorer
Ядро GECKO (ядро Firefox) используется Mozilla FireFox (браузер Firefox)
Ядро WEBKIT используется Apple Safari (Win/Mac/iPhone/iPad)
                         Мобильный браузер Symbian
                         Браузер Android по умолчанию
                         Google Chrome

7) Что такое API

API(Application Programming Interface) - это интерфейс взаимодействия между программами.
В Web это взаимодействие различных сайтов со сторонними приложениями.
 
8. Что такое ендпоинты

Каждый API-сервис имеет ендпоинт к которому и нужно обращаться,например отправлять HTTP запрос.
Эндпоинты работают вместе с методами API.Это определенные URL-адреса,которые приложение использует для связи
со сторонними службами и своими пользователями.URL - это роут ,который может обрабатывать разные методы запроса.
Каждый тип запроса это отдельный ендпоинт.

9) URL (URI, URL, URN)

URI (Uniform Resource Identifier) – это строка символов, которая используется для идентификации какого-либо ресурса
по его адресу или по его имени, либо по тому и тому вместе.
URL (Uniform Resource Locator) – это строка символов, которая используется для идентификации какого-либо ресурса,
но только по его адресу, по его местоположению.
URN (Uniform Resource Name) – это строка символов, которая используется для идентификации какого-либо ресурса, но только по его имени.

10) Идемпотентные HTTP методы

Метод HTTP является идемпотентным,если повторный идентичный запрос ,сделанный один или несколько раз подряд,
имеет один и тот же эффект,не изменяющий состояние сервера.
Корректно реализованные методы GET, HEAD, PUT и DELETE идемпотентны.

11) Безопасные HTTP методы

Метод HTTP является безопасным,если он не меняет состояние сервера.
Безопасный метод проводит операции "только чтение".

12) Иденфикация, Аутентификация, Авторизация

Идентификация - система запрашивает логин(любой другой идентификатор),пользователь его указывает,система распознает его как существующий
Аутентификация — процедура проверки подлинности, доказательство что пользователь именно тот, за кого себя выдает.
Система просит ввести пароль,пользователь его вводит и система соглашается что пользователь действительно настоящий раз пароль совпал.
Авторизация - предоставление определенных прав

13) Что такое IP

IP - это уникальный адрес, идентифицирующий устройство в интернете или локальной сети.
IP означает "Интернет протокол" - набор правил ,регулирующих формат данных отправляемых через интернет.
IP-адрес - это идентификатор позволяющий передавать информацию между устройствами в сети.
IP-адреса позволяют различать компьютеры, маршрутизаторы и веб-сайты в интернете и являются важным компонентом работы интернета.

14) Что такое октет в DNS

IP-адрес состоит из четырех частей, записанных в виде десятичных чисел с точками (например, 192.168.1.1).
Каждую из этих четырех частей называют октетом

15) Что такое порт, сколько портов у Linux сервера

Порт -это цифровой идентификатор программы,обслуживающий определенные интернет соединения на прикрепленном адресе(IP).
Идентификатор представляет собой набор цифр весом не более 16 Бит, то есть это может быть произвольное число от 0 до 65535, всего – 65536 номеров.
Любому устройству имеющему выход в сеть присваивается индивидуальный IP-адрес.С его помощью запрашиваемые данные находят путь на персональное устройство.
Чтобы стала возможной поддержка одного или нескольких таких соединений и нужны порты.

16) Уровни OSI

Физический уровень(PHYSICAL)
На нем в основном осуществляется передача информации.Главный параметр загруженности - бит.
В качестве канала передачи информации используются:кабели: телефонный, коаксиал, витая пара, оптический.

Канальный уровень(DATA LINK)
IP-адрес будет сравнен на совместимость со средой передачи.
Для удобства дальнейших операция ,биты группируются в кадры.
Задачи data link
Найти, где в потоке бит, начинается и оканчивается сообщение
Обнаружить и скорректировать ошибки при отправке информации
Адресация, необходимо знать, какому компьютеру отправлять информацию, потому что к разделяемой среде в основном, подключается несколько компьютеров
Обеспечить согласованный доступ к разделяемой среде, чтобы в одно и то же время, информацию передавал один компьютер.

Сетевой уровень (NETWORK)
Этап напоминает процесс распределения информации. К примеру, все пользователя делиться на группы, а пакеты данных расходятся в соответствии с IP адресами, состоящими из 32 битов. 
Именно благодаря работе маршрутизаторов на этой инстанции, устраняются все различия сетей. Это процесс так называемой логической маршрутизации.

Транспортный уровень (TRANSPORT)
Есть следующая задача,на компьютер который соединен с составной сетью приходит пакет,на компьютере много сетевых приложений (веб-браузер,скайп,почта)
нам необходимо понять какому приложению нужно передать этот пакет.Взаимодействием сетевых приложений занимается транспортный протокол.
Для адресации на транспортном уровне используются порты

Сеансовый уровень (SESSION)
Сеансовый (сессия) – это набор сетевых взаимодействий, целенаправленных на решение единственной задачи.

Уровень представления данных (PRESENTATION)
Функции – представить данные, передаваемых между прикладными процессами, в необходимой форме.

Прикладной уровень (APPLICATION)
Необходим для взаимодействия между собой сетевых приложений, таких как web, e-mail, skype и тд.
Функции application:
Решение задач, отправка файлов; управление заданиями и системой;
Определение пользователей по их логину, e-mail адресу, паролям, электронным подписям;
Запросы на соединение с иными прикладными процессами;

17) Хедеры http запросов
Заголовки HTTP являются основной частью этих HTTP-запросов и ответов, и они несут информацию о браузере клиента,
запрошенной странице, сервере и многом другом.
